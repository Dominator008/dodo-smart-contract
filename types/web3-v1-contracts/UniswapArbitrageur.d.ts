/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface UniswapArbitrageur extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): UniswapArbitrageur;
  clone(): UniswapArbitrageur;
  methods: {
    _BASE_(): NonPayableTransactionObject<string>;

    _DODO_(): NonPayableTransactionObject<string>;

    _QUOTE_(): NonPayableTransactionObject<string>;

    _REVERSE_(): NonPayableTransactionObject<boolean>;

    _UNISWAP_(): NonPayableTransactionObject<string>;

    dodoCall(
      isDODOBuy: boolean,
      baseAmount: number | string,
      quoteAmount: number | string,
      arg3: string | number[]
    ): NonPayableTransactionObject<void>;

    executeBuyArbitrage(
      baseAmount: number | string
    ): NonPayableTransactionObject<string>;

    executeSellArbitrage(
      baseAmount: number | string
    ): NonPayableTransactionObject<string>;

    retrieve(
      token: string,
      amount: number | string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
