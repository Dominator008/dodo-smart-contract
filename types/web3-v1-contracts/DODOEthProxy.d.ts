/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProxyBuyEthWithToken = ContractEventLog<{
  buyer: string;
  quoteToken: string;
  receiveEth: string;
  payToken: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ProxyBuyTokenWithEth = ContractEventLog<{
  buyer: string;
  baseToken: string;
  receiveToken: string;
  payEth: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ProxyDepositEthAsBase = ContractEventLog<{
  lp: string;
  DODO: string;
  ethAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type ProxyDepositEthAsQuote = ContractEventLog<{
  lp: string;
  DODO: string;
  ethAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type ProxySellEthToToken = ContractEventLog<{
  seller: string;
  quoteToken: string;
  payEth: string;
  receiveToken: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ProxySellTokenToEth = ContractEventLog<{
  seller: string;
  baseToken: string;
  payToken: string;
  receiveEth: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ProxyWithdrawEthAsBase = ContractEventLog<{
  lp: string;
  DODO: string;
  ethAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type ProxyWithdrawEthAsQuote = ContractEventLog<{
  lp: string;
  DODO: string;
  ethAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface DodoEthProxy extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DodoEthProxy;
  clone(): DodoEthProxy;
  methods: {
    _DODO_ZOO_(): NonPayableTransactionObject<string>;

    _WETH_(): NonPayableTransactionObject<string>;

    buyEthWithToken(
      quoteTokenAddress: string,
      ethAmount: number | string,
      maxPayTokenAmount: number | string
    ): NonPayableTransactionObject<string>;

    buyTokenWithEth(
      baseTokenAddress: string,
      tokenAmount: number | string,
      maxPayEthAmount: number | string
    ): PayableTransactionObject<string>;

    depositEthAsBase(
      ethAmount: number | string,
      quoteTokenAddress: string
    ): PayableTransactionObject<void>;

    depositEthAsQuote(
      ethAmount: number | string,
      baseTokenAddress: string
    ): PayableTransactionObject<void>;

    sellEthToToken(
      quoteTokenAddress: string,
      ethAmount: number | string,
      minReceiveTokenAmount: number | string
    ): PayableTransactionObject<string>;

    sellTokenToEth(
      baseTokenAddress: string,
      tokenAmount: number | string,
      minReceiveEthAmount: number | string
    ): NonPayableTransactionObject<string>;

    withdrawAllEthAsBase(
      quoteTokenAddress: string
    ): NonPayableTransactionObject<string>;

    withdrawAllEthAsQuote(
      baseTokenAddress: string
    ): NonPayableTransactionObject<string>;

    withdrawEthAsBase(
      ethAmount: number | string,
      quoteTokenAddress: string
    ): NonPayableTransactionObject<string>;

    withdrawEthAsQuote(
      ethAmount: number | string,
      baseTokenAddress: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    ProxyBuyEthWithToken(cb?: Callback<ProxyBuyEthWithToken>): EventEmitter;
    ProxyBuyEthWithToken(
      options?: EventOptions,
      cb?: Callback<ProxyBuyEthWithToken>
    ): EventEmitter;

    ProxyBuyTokenWithEth(cb?: Callback<ProxyBuyTokenWithEth>): EventEmitter;
    ProxyBuyTokenWithEth(
      options?: EventOptions,
      cb?: Callback<ProxyBuyTokenWithEth>
    ): EventEmitter;

    ProxyDepositEthAsBase(cb?: Callback<ProxyDepositEthAsBase>): EventEmitter;
    ProxyDepositEthAsBase(
      options?: EventOptions,
      cb?: Callback<ProxyDepositEthAsBase>
    ): EventEmitter;

    ProxyDepositEthAsQuote(cb?: Callback<ProxyDepositEthAsQuote>): EventEmitter;
    ProxyDepositEthAsQuote(
      options?: EventOptions,
      cb?: Callback<ProxyDepositEthAsQuote>
    ): EventEmitter;

    ProxySellEthToToken(cb?: Callback<ProxySellEthToToken>): EventEmitter;
    ProxySellEthToToken(
      options?: EventOptions,
      cb?: Callback<ProxySellEthToToken>
    ): EventEmitter;

    ProxySellTokenToEth(cb?: Callback<ProxySellTokenToEth>): EventEmitter;
    ProxySellTokenToEth(
      options?: EventOptions,
      cb?: Callback<ProxySellTokenToEth>
    ): EventEmitter;

    ProxyWithdrawEthAsBase(cb?: Callback<ProxyWithdrawEthAsBase>): EventEmitter;
    ProxyWithdrawEthAsBase(
      options?: EventOptions,
      cb?: Callback<ProxyWithdrawEthAsBase>
    ): EventEmitter;

    ProxyWithdrawEthAsQuote(
      cb?: Callback<ProxyWithdrawEthAsQuote>
    ): EventEmitter;
    ProxyWithdrawEthAsQuote(
      options?: EventOptions,
      cb?: Callback<ProxyWithdrawEthAsQuote>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ProxyBuyEthWithToken", cb: Callback<ProxyBuyEthWithToken>): void;
  once(
    event: "ProxyBuyEthWithToken",
    options: EventOptions,
    cb: Callback<ProxyBuyEthWithToken>
  ): void;

  once(event: "ProxyBuyTokenWithEth", cb: Callback<ProxyBuyTokenWithEth>): void;
  once(
    event: "ProxyBuyTokenWithEth",
    options: EventOptions,
    cb: Callback<ProxyBuyTokenWithEth>
  ): void;

  once(
    event: "ProxyDepositEthAsBase",
    cb: Callback<ProxyDepositEthAsBase>
  ): void;
  once(
    event: "ProxyDepositEthAsBase",
    options: EventOptions,
    cb: Callback<ProxyDepositEthAsBase>
  ): void;

  once(
    event: "ProxyDepositEthAsQuote",
    cb: Callback<ProxyDepositEthAsQuote>
  ): void;
  once(
    event: "ProxyDepositEthAsQuote",
    options: EventOptions,
    cb: Callback<ProxyDepositEthAsQuote>
  ): void;

  once(event: "ProxySellEthToToken", cb: Callback<ProxySellEthToToken>): void;
  once(
    event: "ProxySellEthToToken",
    options: EventOptions,
    cb: Callback<ProxySellEthToToken>
  ): void;

  once(event: "ProxySellTokenToEth", cb: Callback<ProxySellTokenToEth>): void;
  once(
    event: "ProxySellTokenToEth",
    options: EventOptions,
    cb: Callback<ProxySellTokenToEth>
  ): void;

  once(
    event: "ProxyWithdrawEthAsBase",
    cb: Callback<ProxyWithdrawEthAsBase>
  ): void;
  once(
    event: "ProxyWithdrawEthAsBase",
    options: EventOptions,
    cb: Callback<ProxyWithdrawEthAsBase>
  ): void;

  once(
    event: "ProxyWithdrawEthAsQuote",
    cb: Callback<ProxyWithdrawEthAsQuote>
  ): void;
  once(
    event: "ProxyWithdrawEthAsQuote",
    options: EventOptions,
    cb: Callback<ProxyWithdrawEthAsQuote>
  ): void;
}
