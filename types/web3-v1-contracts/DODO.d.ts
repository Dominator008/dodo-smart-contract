/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BuyBaseToken = ContractEventLog<{
  buyer: string;
  receiveBase: string;
  payQuote: string;
  0: string;
  1: string;
  2: string;
}>;
export type ChargeMaintainerFee = ContractEventLog<{
  maintainer: string;
  isBaseToken: boolean;
  amount: string;
  0: string;
  1: boolean;
  2: string;
}>;
export type ChargePenalty = ContractEventLog<{
  payer: string;
  isBaseToken: boolean;
  amount: string;
  0: string;
  1: boolean;
  2: string;
}>;
export type ClaimAssets = ContractEventLog<{
  user: string;
  baseTokenAmount: string;
  quoteTokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposit = ContractEventLog<{
  payer: string;
  receiver: string;
  isBaseToken: boolean;
  amount: string;
  lpTokenAmount: string;
  0: string;
  1: string;
  2: boolean;
  3: string;
  4: string;
}>;
export type Donate = ContractEventLog<{
  amount: string;
  isBaseToken: boolean;
  0: string;
  1: boolean;
}>;
export type OwnershipTransferPrepared = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SellBaseToken = ContractEventLog<{
  seller: string;
  payBase: string;
  receiveQuote: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateGasPriceLimit = ContractEventLog<{
  oldGasPriceLimit: string;
  newGasPriceLimit: string;
  0: string;
  1: string;
}>;
export type UpdateK = ContractEventLog<{
  oldK: string;
  newK: string;
  0: string;
  1: string;
}>;
export type UpdateLiquidityProviderFeeRate = ContractEventLog<{
  oldLiquidityProviderFeeRate: string;
  newLiquidityProviderFeeRate: string;
  0: string;
  1: string;
}>;
export type UpdateMaintainerFeeRate = ContractEventLog<{
  oldMaintainerFeeRate: string;
  newMaintainerFeeRate: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  payer: string;
  receiver: string;
  isBaseToken: boolean;
  amount: string;
  lpTokenAmount: string;
  0: string;
  1: string;
  2: boolean;
  3: string;
  4: string;
}>;

export interface Dodo extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Dodo;
  clone(): Dodo;
  methods: {
    _BASE_BALANCE_(): NonPayableTransactionObject<string>;

    _BASE_BALANCE_LIMIT_(): NonPayableTransactionObject<string>;

    _BASE_CAPITAL_RECEIVE_QUOTE_(): NonPayableTransactionObject<string>;

    _BASE_CAPITAL_TOKEN_(): NonPayableTransactionObject<string>;

    _BASE_TOKEN_(): NonPayableTransactionObject<string>;

    _BUYING_ALLOWED_(): NonPayableTransactionObject<boolean>;

    _CLAIMED_(arg0: string): NonPayableTransactionObject<boolean>;

    _CLOSED_(): NonPayableTransactionObject<boolean>;

    _DEPOSIT_BASE_ALLOWED_(): NonPayableTransactionObject<boolean>;

    _DEPOSIT_QUOTE_ALLOWED_(): NonPayableTransactionObject<boolean>;

    _GAS_PRICE_LIMIT_(): NonPayableTransactionObject<string>;

    _K_(): NonPayableTransactionObject<string>;

    _LP_FEE_RATE_(): NonPayableTransactionObject<string>;

    _MAINTAINER_(): NonPayableTransactionObject<string>;

    _MT_FEE_RATE_(): NonPayableTransactionObject<string>;

    _NEW_OWNER_(): NonPayableTransactionObject<string>;

    _ORACLE_(): NonPayableTransactionObject<string>;

    _OWNER_(): NonPayableTransactionObject<string>;

    _QUOTE_BALANCE_(): NonPayableTransactionObject<string>;

    _QUOTE_BALANCE_LIMIT_(): NonPayableTransactionObject<string>;

    _QUOTE_CAPITAL_RECEIVE_BASE_(): NonPayableTransactionObject<string>;

    _QUOTE_CAPITAL_TOKEN_(): NonPayableTransactionObject<string>;

    _QUOTE_TOKEN_(): NonPayableTransactionObject<string>;

    _R_STATUS_(): NonPayableTransactionObject<string>;

    _SELLING_ALLOWED_(): NonPayableTransactionObject<boolean>;

    _SUPERVISOR_(): NonPayableTransactionObject<string>;

    _TARGET_BASE_TOKEN_AMOUNT_(): NonPayableTransactionObject<string>;

    _TARGET_QUOTE_TOKEN_AMOUNT_(): NonPayableTransactionObject<string>;

    _TRADE_ALLOWED_(): NonPayableTransactionObject<boolean>;

    buyBaseToken(
      amount: number | string,
      maxPayQuote: number | string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    claimAssets(): NonPayableTransactionObject<void>;

    claimOwnership(): NonPayableTransactionObject<void>;

    depositBase(amount: number | string): NonPayableTransactionObject<string>;

    depositBaseTo(
      to: string,
      amount: number | string
    ): NonPayableTransactionObject<string>;

    depositQuote(amount: number | string): NonPayableTransactionObject<string>;

    depositQuoteTo(
      to: string,
      amount: number | string
    ): NonPayableTransactionObject<string>;

    disableBaseDeposit(): NonPayableTransactionObject<void>;

    disableBuying(): NonPayableTransactionObject<void>;

    disableQuoteDeposit(): NonPayableTransactionObject<void>;

    disableSelling(): NonPayableTransactionObject<void>;

    disableTrading(): NonPayableTransactionObject<void>;

    donateBaseToken(amount: number | string): NonPayableTransactionObject<void>;

    donateQuoteToken(
      amount: number | string
    ): NonPayableTransactionObject<void>;

    enableBaseDeposit(): NonPayableTransactionObject<void>;

    enableBuying(): NonPayableTransactionObject<void>;

    enableQuoteDeposit(): NonPayableTransactionObject<void>;

    enableSelling(): NonPayableTransactionObject<void>;

    enableTrading(): NonPayableTransactionObject<void>;

    finalSettlement(): NonPayableTransactionObject<void>;

    getBaseCapitalBalanceOf(lp: string): NonPayableTransactionObject<string>;

    getExpectedTarget(): NonPayableTransactionObject<{
      baseTarget: string;
      quoteTarget: string;
      0: string;
      1: string;
    }>;

    getLpBaseBalance(lp: string): NonPayableTransactionObject<string>;

    getLpQuoteBalance(lp: string): NonPayableTransactionObject<string>;

    getMidPrice(): NonPayableTransactionObject<string>;

    getOraclePrice(): NonPayableTransactionObject<string>;

    getQuoteCapitalBalanceOf(lp: string): NonPayableTransactionObject<string>;

    getTotalBaseCapital(): NonPayableTransactionObject<string>;

    getTotalQuoteCapital(): NonPayableTransactionObject<string>;

    getWithdrawBasePenalty(
      amount: number | string
    ): NonPayableTransactionObject<string>;

    getWithdrawQuotePenalty(
      amount: number | string
    ): NonPayableTransactionObject<string>;

    init(
      owner: string,
      supervisor: string,
      maintainer: string,
      baseToken: string,
      quoteToken: string,
      oracle: string,
      lpFeeRate: number | string,
      mtFeeRate: number | string,
      k: number | string,
      gasPriceLimit: number | string
    ): NonPayableTransactionObject<void>;

    queryBuyBaseToken(
      amount: number | string
    ): NonPayableTransactionObject<string>;

    querySellBaseToken(
      amount: number | string
    ): NonPayableTransactionObject<string>;

    retrieve(
      token: string,
      amount: number | string
    ): NonPayableTransactionObject<void>;

    sellBaseToken(
      amount: number | string,
      minReceiveQuote: number | string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    setBaseBalanceLimit(
      newBaseBalanceLimit: number | string
    ): NonPayableTransactionObject<void>;

    setGasPriceLimit(
      newGasPriceLimit: number | string
    ): NonPayableTransactionObject<void>;

    setK(newK: number | string): NonPayableTransactionObject<void>;

    setLiquidityProviderFeeRate(
      newLiquidityPorviderFeeRate: number | string
    ): NonPayableTransactionObject<void>;

    setMaintainer(newMaintainer: string): NonPayableTransactionObject<void>;

    setMaintainerFeeRate(
      newMaintainerFeeRate: number | string
    ): NonPayableTransactionObject<void>;

    setOracle(newOracle: string): NonPayableTransactionObject<void>;

    setQuoteBalanceLimit(
      newQuoteBalanceLimit: number | string
    ): NonPayableTransactionObject<void>;

    setSupervisor(newSupervisor: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    version(): NonPayableTransactionObject<string>;

    withdrawAllBase(): NonPayableTransactionObject<string>;

    withdrawAllBaseTo(to: string): NonPayableTransactionObject<string>;

    withdrawAllQuote(): NonPayableTransactionObject<string>;

    withdrawAllQuoteTo(to: string): NonPayableTransactionObject<string>;

    withdrawBase(amount: number | string): NonPayableTransactionObject<string>;

    withdrawBaseTo(
      to: string,
      amount: number | string
    ): NonPayableTransactionObject<string>;

    withdrawQuote(amount: number | string): NonPayableTransactionObject<string>;

    withdrawQuoteTo(
      to: string,
      amount: number | string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    BuyBaseToken(cb?: Callback<BuyBaseToken>): EventEmitter;
    BuyBaseToken(
      options?: EventOptions,
      cb?: Callback<BuyBaseToken>
    ): EventEmitter;

    ChargeMaintainerFee(cb?: Callback<ChargeMaintainerFee>): EventEmitter;
    ChargeMaintainerFee(
      options?: EventOptions,
      cb?: Callback<ChargeMaintainerFee>
    ): EventEmitter;

    ChargePenalty(cb?: Callback<ChargePenalty>): EventEmitter;
    ChargePenalty(
      options?: EventOptions,
      cb?: Callback<ChargePenalty>
    ): EventEmitter;

    ClaimAssets(cb?: Callback<ClaimAssets>): EventEmitter;
    ClaimAssets(
      options?: EventOptions,
      cb?: Callback<ClaimAssets>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Donate(cb?: Callback<Donate>): EventEmitter;
    Donate(options?: EventOptions, cb?: Callback<Donate>): EventEmitter;

    OwnershipTransferPrepared(
      cb?: Callback<OwnershipTransferPrepared>
    ): EventEmitter;
    OwnershipTransferPrepared(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferPrepared>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SellBaseToken(cb?: Callback<SellBaseToken>): EventEmitter;
    SellBaseToken(
      options?: EventOptions,
      cb?: Callback<SellBaseToken>
    ): EventEmitter;

    UpdateGasPriceLimit(cb?: Callback<UpdateGasPriceLimit>): EventEmitter;
    UpdateGasPriceLimit(
      options?: EventOptions,
      cb?: Callback<UpdateGasPriceLimit>
    ): EventEmitter;

    UpdateK(cb?: Callback<UpdateK>): EventEmitter;
    UpdateK(options?: EventOptions, cb?: Callback<UpdateK>): EventEmitter;

    UpdateLiquidityProviderFeeRate(
      cb?: Callback<UpdateLiquidityProviderFeeRate>
    ): EventEmitter;
    UpdateLiquidityProviderFeeRate(
      options?: EventOptions,
      cb?: Callback<UpdateLiquidityProviderFeeRate>
    ): EventEmitter;

    UpdateMaintainerFeeRate(
      cb?: Callback<UpdateMaintainerFeeRate>
    ): EventEmitter;
    UpdateMaintainerFeeRate(
      options?: EventOptions,
      cb?: Callback<UpdateMaintainerFeeRate>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BuyBaseToken", cb: Callback<BuyBaseToken>): void;
  once(
    event: "BuyBaseToken",
    options: EventOptions,
    cb: Callback<BuyBaseToken>
  ): void;

  once(event: "ChargeMaintainerFee", cb: Callback<ChargeMaintainerFee>): void;
  once(
    event: "ChargeMaintainerFee",
    options: EventOptions,
    cb: Callback<ChargeMaintainerFee>
  ): void;

  once(event: "ChargePenalty", cb: Callback<ChargePenalty>): void;
  once(
    event: "ChargePenalty",
    options: EventOptions,
    cb: Callback<ChargePenalty>
  ): void;

  once(event: "ClaimAssets", cb: Callback<ClaimAssets>): void;
  once(
    event: "ClaimAssets",
    options: EventOptions,
    cb: Callback<ClaimAssets>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Donate", cb: Callback<Donate>): void;
  once(event: "Donate", options: EventOptions, cb: Callback<Donate>): void;

  once(
    event: "OwnershipTransferPrepared",
    cb: Callback<OwnershipTransferPrepared>
  ): void;
  once(
    event: "OwnershipTransferPrepared",
    options: EventOptions,
    cb: Callback<OwnershipTransferPrepared>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SellBaseToken", cb: Callback<SellBaseToken>): void;
  once(
    event: "SellBaseToken",
    options: EventOptions,
    cb: Callback<SellBaseToken>
  ): void;

  once(event: "UpdateGasPriceLimit", cb: Callback<UpdateGasPriceLimit>): void;
  once(
    event: "UpdateGasPriceLimit",
    options: EventOptions,
    cb: Callback<UpdateGasPriceLimit>
  ): void;

  once(event: "UpdateK", cb: Callback<UpdateK>): void;
  once(event: "UpdateK", options: EventOptions, cb: Callback<UpdateK>): void;

  once(
    event: "UpdateLiquidityProviderFeeRate",
    cb: Callback<UpdateLiquidityProviderFeeRate>
  ): void;
  once(
    event: "UpdateLiquidityProviderFeeRate",
    options: EventOptions,
    cb: Callback<UpdateLiquidityProviderFeeRate>
  ): void;

  once(
    event: "UpdateMaintainerFeeRate",
    cb: Callback<UpdateMaintainerFeeRate>
  ): void;
  once(
    event: "UpdateMaintainerFeeRate",
    options: EventOptions,
    cb: Callback<UpdateMaintainerFeeRate>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
