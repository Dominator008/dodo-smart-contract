/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DODOBirth = ContractEventLog<{
  newBorn: string;
  baseToken: string;
  quoteToken: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferPrepared = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface DodoZoo extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DodoZoo;
  clone(): DodoZoo;
  methods: {
    _CLONE_FACTORY_(): NonPayableTransactionObject<string>;

    _DEFAULT_SUPERVISOR_(): NonPayableTransactionObject<string>;

    _DODO_LOGIC_(): NonPayableTransactionObject<string>;

    _DODOs(arg0: number | string): NonPayableTransactionObject<string>;

    _NEW_OWNER_(): NonPayableTransactionObject<string>;

    _OWNER_(): NonPayableTransactionObject<string>;

    addDODO(dodo: string): NonPayableTransactionObject<void>;

    breedDODO(
      maintainer: string,
      baseToken: string,
      quoteToken: string,
      oracle: string,
      lpFeeRate: number | string,
      mtFeeRate: number | string,
      k: number | string,
      gasPriceLimit: number | string
    ): NonPayableTransactionObject<string>;

    claimOwnership(): NonPayableTransactionObject<void>;

    getDODO(
      baseToken: string,
      quoteToken: string
    ): NonPayableTransactionObject<string>;

    getDODOs(): NonPayableTransactionObject<string[]>;

    isDODORegistered(
      baseToken: string,
      quoteToken: string
    ): NonPayableTransactionObject<boolean>;

    removeDODO(dodo: string): NonPayableTransactionObject<void>;

    setCloneFactory(_cloneFactory: string): NonPayableTransactionObject<void>;

    setDODOLogic(_dodoLogic: string): NonPayableTransactionObject<void>;

    setDefaultSupervisor(
      _defaultSupervisor: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    DODOBirth(cb?: Callback<DODOBirth>): EventEmitter;
    DODOBirth(options?: EventOptions, cb?: Callback<DODOBirth>): EventEmitter;

    OwnershipTransferPrepared(
      cb?: Callback<OwnershipTransferPrepared>
    ): EventEmitter;
    OwnershipTransferPrepared(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferPrepared>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DODOBirth", cb: Callback<DODOBirth>): void;
  once(
    event: "DODOBirth",
    options: EventOptions,
    cb: Callback<DODOBirth>
  ): void;

  once(
    event: "OwnershipTransferPrepared",
    cb: Callback<OwnershipTransferPrepared>
  ): void;
  once(
    event: "OwnershipTransferPrepared",
    options: EventOptions,
    cb: Callback<OwnershipTransferPrepared>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
