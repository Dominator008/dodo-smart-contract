/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransfer = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface MinimumOracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MinimumOracle;
  clone(): MinimumOracle;
  methods: {
    _OWNER_(): NonPayableTransactionObject<string>;

    getPrice(): NonPayableTransactionObject<string>;

    setPrice(newPrice: number | string): NonPayableTransactionObject<void>;

    tokenPrice(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransfer(cb?: Callback<OwnershipTransfer>): EventEmitter;
    OwnershipTransfer(
      options?: EventOptions,
      cb?: Callback<OwnershipTransfer>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransfer", cb: Callback<OwnershipTransfer>): void;
  once(
    event: "OwnershipTransfer",
    options: EventOptions,
    cb: Callback<OwnershipTransfer>
  ): void;
}
