/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface Idodo extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Idodo;
  clone(): Idodo;
  methods: {
    _BASE_CAPITAL_TOKEN_(): NonPayableTransactionObject<string>;

    _BASE_TOKEN_(): NonPayableTransactionObject<string>;

    _QUOTE_CAPITAL_TOKEN_(): NonPayableTransactionObject<string>;

    _QUOTE_TOKEN_(): NonPayableTransactionObject<string>;

    buyBaseToken(
      amount: number | string,
      maxPayQuote: number | string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    claimOwnership(): NonPayableTransactionObject<void>;

    depositBaseTo(
      to: string,
      amount: number | string
    ): NonPayableTransactionObject<string>;

    depositQuoteTo(
      to: string,
      amount: number | string
    ): NonPayableTransactionObject<string>;

    init(
      owner: string,
      supervisor: string,
      maintainer: string,
      baseToken: string,
      quoteToken: string,
      oracle: string,
      lpFeeRate: number | string,
      mtFeeRate: number | string,
      k: number | string,
      gasPriceLimit: number | string
    ): NonPayableTransactionObject<void>;

    queryBuyBaseToken(
      amount: number | string
    ): NonPayableTransactionObject<string>;

    querySellBaseToken(
      amount: number | string
    ): NonPayableTransactionObject<string>;

    sellBaseToken(
      amount: number | string,
      minReceiveQuote: number | string,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdrawAllBase(): NonPayableTransactionObject<string>;

    withdrawAllQuote(): NonPayableTransactionObject<string>;

    withdrawBase(amount: number | string): NonPayableTransactionObject<string>;

    withdrawQuote(amount: number | string): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
